
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Products` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Products
 * 
 */
export type ProductsModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductsPayload>

export type AggregateProducts = {
  _count: ProductsCountAggregateOutputType | null
  _avg: ProductsAvgAggregateOutputType | null
  _sum: ProductsSumAggregateOutputType | null
  _min: ProductsMinAggregateOutputType | null
  _max: ProductsMaxAggregateOutputType | null
}

export type ProductsAvgAggregateOutputType = {
  id: number | null
}

export type ProductsSumAggregateOutputType = {
  id: number | null
}

export type ProductsMinAggregateOutputType = {
  id: number | null
  name: string | null
  image_url: string | null
  created_at: Date | null
}

export type ProductsMaxAggregateOutputType = {
  id: number | null
  name: string | null
  image_url: string | null
  created_at: Date | null
}

export type ProductsCountAggregateOutputType = {
  id: number
  name: number
  image_url: number
  created_at: number
  _all: number
}


export type ProductsAvgAggregateInputType = {
  id?: true
}

export type ProductsSumAggregateInputType = {
  id?: true
}

export type ProductsMinAggregateInputType = {
  id?: true
  name?: true
  image_url?: true
  created_at?: true
}

export type ProductsMaxAggregateInputType = {
  id?: true
  name?: true
  image_url?: true
  created_at?: true
}

export type ProductsCountAggregateInputType = {
  id?: true
  name?: true
  image_url?: true
  created_at?: true
  _all?: true
}

export type ProductsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Products to aggregate.
   */
  where?: Prisma.ProductsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Products to fetch.
   */
  orderBy?: Prisma.ProductsOrderByWithRelationInput | Prisma.ProductsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Products.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Products
  **/
  _count?: true | ProductsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductsMaxAggregateInputType
}

export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
      [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProducts[P]>
    : Prisma.GetScalarType<T[P], AggregateProducts[P]>
}




export type ProductsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductsWhereInput
  orderBy?: Prisma.ProductsOrderByWithAggregationInput | Prisma.ProductsOrderByWithAggregationInput[]
  by: Prisma.ProductsScalarFieldEnum[] | Prisma.ProductsScalarFieldEnum
  having?: Prisma.ProductsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductsCountAggregateInputType | true
  _avg?: ProductsAvgAggregateInputType
  _sum?: ProductsSumAggregateInputType
  _min?: ProductsMinAggregateInputType
  _max?: ProductsMaxAggregateInputType
}

export type ProductsGroupByOutputType = {
  id: number
  name: string
  image_url: string
  created_at: Date
  _count: ProductsCountAggregateOutputType | null
  _avg: ProductsAvgAggregateOutputType | null
  _sum: ProductsSumAggregateOutputType | null
  _min: ProductsMinAggregateOutputType | null
  _max: ProductsMaxAggregateOutputType | null
}

type GetProductsGroupByPayload<T extends ProductsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductsGroupByOutputType[P]>
      }
    >
  >



export type ProductsWhereInput = {
  AND?: Prisma.ProductsWhereInput | Prisma.ProductsWhereInput[]
  OR?: Prisma.ProductsWhereInput[]
  NOT?: Prisma.ProductsWhereInput | Prisma.ProductsWhereInput[]
  id?: Prisma.IntFilter<"Products"> | number
  name?: Prisma.StringFilter<"Products"> | string
  image_url?: Prisma.StringFilter<"Products"> | string
  created_at?: Prisma.DateTimeFilter<"Products"> | Date | string
  Rooms?: Prisma.RoomsListRelationFilter
}

export type ProductsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  Rooms?: Prisma.RoomsOrderByRelationAggregateInput
}

export type ProductsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.ProductsWhereInput | Prisma.ProductsWhereInput[]
  OR?: Prisma.ProductsWhereInput[]
  NOT?: Prisma.ProductsWhereInput | Prisma.ProductsWhereInput[]
  image_url?: Prisma.StringFilter<"Products"> | string
  created_at?: Prisma.DateTimeFilter<"Products"> | Date | string
  Rooms?: Prisma.RoomsListRelationFilter
}, "id" | "name">

export type ProductsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  _count?: Prisma.ProductsCountOrderByAggregateInput
  _avg?: Prisma.ProductsAvgOrderByAggregateInput
  _max?: Prisma.ProductsMaxOrderByAggregateInput
  _min?: Prisma.ProductsMinOrderByAggregateInput
  _sum?: Prisma.ProductsSumOrderByAggregateInput
}

export type ProductsScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductsScalarWhereWithAggregatesInput | Prisma.ProductsScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductsScalarWhereWithAggregatesInput | Prisma.ProductsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Products"> | number
  name?: Prisma.StringWithAggregatesFilter<"Products"> | string
  image_url?: Prisma.StringWithAggregatesFilter<"Products"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Products"> | Date | string
}

export type ProductsCreateInput = {
  name: string
  image_url: string
  created_at?: Date | string
  Rooms?: Prisma.RoomsCreateNestedManyWithoutProductInput
}

export type ProductsUncheckedCreateInput = {
  id?: number
  name: string
  image_url: string
  created_at?: Date | string
  Rooms?: Prisma.RoomsUncheckedCreateNestedManyWithoutProductInput
}

export type ProductsUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  image_url?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Rooms?: Prisma.RoomsUpdateManyWithoutProductNestedInput
}

export type ProductsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  image_url?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Rooms?: Prisma.RoomsUncheckedUpdateManyWithoutProductNestedInput
}

export type ProductsCreateManyInput = {
  id?: number
  name: string
  image_url: string
  created_at?: Date | string
}

export type ProductsUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  image_url?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  image_url?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type ProductsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProductsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type ProductsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type ProductsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProductsScalarRelationFilter = {
  is?: Prisma.ProductsWhereInput
  isNot?: Prisma.ProductsWhereInput
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ProductsCreateNestedOneWithoutRoomsInput = {
  create?: Prisma.XOR<Prisma.ProductsCreateWithoutRoomsInput, Prisma.ProductsUncheckedCreateWithoutRoomsInput>
  connectOrCreate?: Prisma.ProductsCreateOrConnectWithoutRoomsInput
  connect?: Prisma.ProductsWhereUniqueInput
}

export type ProductsUpdateOneRequiredWithoutRoomsNestedInput = {
  create?: Prisma.XOR<Prisma.ProductsCreateWithoutRoomsInput, Prisma.ProductsUncheckedCreateWithoutRoomsInput>
  connectOrCreate?: Prisma.ProductsCreateOrConnectWithoutRoomsInput
  upsert?: Prisma.ProductsUpsertWithoutRoomsInput
  connect?: Prisma.ProductsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProductsUpdateToOneWithWhereWithoutRoomsInput, Prisma.ProductsUpdateWithoutRoomsInput>, Prisma.ProductsUncheckedUpdateWithoutRoomsInput>
}

export type ProductsCreateWithoutRoomsInput = {
  name: string
  image_url: string
  created_at?: Date | string
}

export type ProductsUncheckedCreateWithoutRoomsInput = {
  id?: number
  name: string
  image_url: string
  created_at?: Date | string
}

export type ProductsCreateOrConnectWithoutRoomsInput = {
  where: Prisma.ProductsWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductsCreateWithoutRoomsInput, Prisma.ProductsUncheckedCreateWithoutRoomsInput>
}

export type ProductsUpsertWithoutRoomsInput = {
  update: Prisma.XOR<Prisma.ProductsUpdateWithoutRoomsInput, Prisma.ProductsUncheckedUpdateWithoutRoomsInput>
  create: Prisma.XOR<Prisma.ProductsCreateWithoutRoomsInput, Prisma.ProductsUncheckedCreateWithoutRoomsInput>
  where?: Prisma.ProductsWhereInput
}

export type ProductsUpdateToOneWithWhereWithoutRoomsInput = {
  where?: Prisma.ProductsWhereInput
  data: Prisma.XOR<Prisma.ProductsUpdateWithoutRoomsInput, Prisma.ProductsUncheckedUpdateWithoutRoomsInput>
}

export type ProductsUpdateWithoutRoomsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  image_url?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProductsUncheckedUpdateWithoutRoomsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  image_url?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ProductsCountOutputType
 */

export type ProductsCountOutputType = {
  Rooms: number
}

export type ProductsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Rooms?: boolean | ProductsCountOutputTypeCountRoomsArgs
}

/**
 * ProductsCountOutputType without action
 */
export type ProductsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductsCountOutputType
   */
  select?: Prisma.ProductsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProductsCountOutputType without action
 */
export type ProductsCountOutputTypeCountRoomsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RoomsWhereInput
}


export type ProductsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  image_url?: boolean
  created_at?: boolean
  Rooms?: boolean | Prisma.Products$RoomsArgs<ExtArgs>
  _count?: boolean | Prisma.ProductsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["products"]>

export type ProductsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  image_url?: boolean
  created_at?: boolean
}, ExtArgs["result"]["products"]>

export type ProductsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  image_url?: boolean
  created_at?: boolean
}, ExtArgs["result"]["products"]>

export type ProductsSelectScalar = {
  id?: boolean
  name?: boolean
  image_url?: boolean
  created_at?: boolean
}

export type ProductsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "image_url" | "created_at", ExtArgs["result"]["products"]>
export type ProductsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Rooms?: boolean | Prisma.Products$RoomsArgs<ExtArgs>
  _count?: boolean | Prisma.ProductsCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProductsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ProductsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ProductsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Products"
  objects: {
    Rooms: Prisma.$RoomsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    image_url: string
    created_at: Date
  }, ExtArgs["result"]["products"]>
  composites: {}
}

export type ProductsGetPayload<S extends boolean | null | undefined | ProductsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductsPayload, S>

export type ProductsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductsCountAggregateInputType | true
  }

export interface ProductsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Products'], meta: { name: 'Products' } }
  /**
   * Find zero or one Products that matches the filter.
   * @param {ProductsFindUniqueArgs} args - Arguments to find a Products
   * @example
   * // Get one Products
   * const products = await prisma.products.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductsFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductsClient<runtime.Types.Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Products that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductsFindUniqueOrThrowArgs} args - Arguments to find a Products
   * @example
   * // Get one Products
   * const products = await prisma.products.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductsClient<runtime.Types.Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Products that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductsFindFirstArgs} args - Arguments to find a Products
   * @example
   * // Get one Products
   * const products = await prisma.products.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductsFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductsFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductsClient<runtime.Types.Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Products that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductsFindFirstOrThrowArgs} args - Arguments to find a Products
   * @example
   * // Get one Products
   * const products = await prisma.products.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductsClient<runtime.Types.Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Products that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Products
   * const products = await prisma.products.findMany()
   * 
   * // Get first 10 Products
   * const products = await prisma.products.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductsFindManyArgs>(args?: Prisma.SelectSubset<T, ProductsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Products.
   * @param {ProductsCreateArgs} args - Arguments to create a Products.
   * @example
   * // Create one Products
   * const Products = await prisma.products.create({
   *   data: {
   *     // ... data to create a Products
   *   }
   * })
   * 
   */
  create<T extends ProductsCreateArgs>(args: Prisma.SelectSubset<T, ProductsCreateArgs<ExtArgs>>): Prisma.Prisma__ProductsClient<runtime.Types.Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Products.
   * @param {ProductsCreateManyArgs} args - Arguments to create many Products.
   * @example
   * // Create many Products
   * const products = await prisma.products.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductsCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Products and returns the data saved in the database.
   * @param {ProductsCreateManyAndReturnArgs} args - Arguments to create many Products.
   * @example
   * // Create many Products
   * const products = await prisma.products.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Products and only return the `id`
   * const productsWithIdOnly = await prisma.products.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Products.
   * @param {ProductsDeleteArgs} args - Arguments to delete one Products.
   * @example
   * // Delete one Products
   * const Products = await prisma.products.delete({
   *   where: {
   *     // ... filter to delete one Products
   *   }
   * })
   * 
   */
  delete<T extends ProductsDeleteArgs>(args: Prisma.SelectSubset<T, ProductsDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductsClient<runtime.Types.Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Products.
   * @param {ProductsUpdateArgs} args - Arguments to update one Products.
   * @example
   * // Update one Products
   * const products = await prisma.products.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductsUpdateArgs>(args: Prisma.SelectSubset<T, ProductsUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductsClient<runtime.Types.Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Products.
   * @param {ProductsDeleteManyArgs} args - Arguments to filter Products to delete.
   * @example
   * // Delete a few Products
   * const { count } = await prisma.products.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductsDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Products.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Products
   * const products = await prisma.products.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductsUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Products and returns the data updated in the database.
   * @param {ProductsUpdateManyAndReturnArgs} args - Arguments to update many Products.
   * @example
   * // Update many Products
   * const products = await prisma.products.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Products and only return the `id`
   * const productsWithIdOnly = await prisma.products.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Products.
   * @param {ProductsUpsertArgs} args - Arguments to update or create a Products.
   * @example
   * // Update or create a Products
   * const products = await prisma.products.upsert({
   *   create: {
   *     // ... data to create a Products
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Products we want to update
   *   }
   * })
   */
  upsert<T extends ProductsUpsertArgs>(args: Prisma.SelectSubset<T, ProductsUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductsClient<runtime.Types.Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Products.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductsCountArgs} args - Arguments to filter Products to count.
   * @example
   * // Count the number of Products
   * const count = await prisma.products.count({
   *   where: {
   *     // ... the filter for the Products we want to count
   *   }
   * })
  **/
  count<T extends ProductsCountArgs>(
    args?: Prisma.Subset<T, ProductsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Products.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductsAggregateArgs>(args: Prisma.Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

  /**
   * Group by Products.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductsGroupByArgs['orderBy'] }
      : { orderBy?: ProductsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Products model
 */
readonly fields: ProductsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Products.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Rooms<T extends Prisma.Products$RoomsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Products$RoomsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RoomsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Products model
 */
export interface ProductsFieldRefs {
  readonly id: Prisma.FieldRef<"Products", 'Int'>
  readonly name: Prisma.FieldRef<"Products", 'String'>
  readonly image_url: Prisma.FieldRef<"Products", 'String'>
  readonly created_at: Prisma.FieldRef<"Products", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Products findUnique
 */
export type ProductsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Products
   */
  select?: Prisma.ProductsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Products
   */
  omit?: Prisma.ProductsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductsInclude<ExtArgs> | null
  /**
   * Filter, which Products to fetch.
   */
  where: Prisma.ProductsWhereUniqueInput
}

/**
 * Products findUniqueOrThrow
 */
export type ProductsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Products
   */
  select?: Prisma.ProductsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Products
   */
  omit?: Prisma.ProductsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductsInclude<ExtArgs> | null
  /**
   * Filter, which Products to fetch.
   */
  where: Prisma.ProductsWhereUniqueInput
}

/**
 * Products findFirst
 */
export type ProductsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Products
   */
  select?: Prisma.ProductsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Products
   */
  omit?: Prisma.ProductsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductsInclude<ExtArgs> | null
  /**
   * Filter, which Products to fetch.
   */
  where?: Prisma.ProductsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Products to fetch.
   */
  orderBy?: Prisma.ProductsOrderByWithRelationInput | Prisma.ProductsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Products.
   */
  cursor?: Prisma.ProductsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Products.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Products.
   */
  distinct?: Prisma.ProductsScalarFieldEnum | Prisma.ProductsScalarFieldEnum[]
}

/**
 * Products findFirstOrThrow
 */
export type ProductsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Products
   */
  select?: Prisma.ProductsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Products
   */
  omit?: Prisma.ProductsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductsInclude<ExtArgs> | null
  /**
   * Filter, which Products to fetch.
   */
  where?: Prisma.ProductsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Products to fetch.
   */
  orderBy?: Prisma.ProductsOrderByWithRelationInput | Prisma.ProductsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Products.
   */
  cursor?: Prisma.ProductsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Products.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Products.
   */
  distinct?: Prisma.ProductsScalarFieldEnum | Prisma.ProductsScalarFieldEnum[]
}

/**
 * Products findMany
 */
export type ProductsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Products
   */
  select?: Prisma.ProductsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Products
   */
  omit?: Prisma.ProductsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductsInclude<ExtArgs> | null
  /**
   * Filter, which Products to fetch.
   */
  where?: Prisma.ProductsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Products to fetch.
   */
  orderBy?: Prisma.ProductsOrderByWithRelationInput | Prisma.ProductsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Products.
   */
  cursor?: Prisma.ProductsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Products from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Products.
   */
  skip?: number
  distinct?: Prisma.ProductsScalarFieldEnum | Prisma.ProductsScalarFieldEnum[]
}

/**
 * Products create
 */
export type ProductsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Products
   */
  select?: Prisma.ProductsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Products
   */
  omit?: Prisma.ProductsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductsInclude<ExtArgs> | null
  /**
   * The data needed to create a Products.
   */
  data: Prisma.XOR<Prisma.ProductsCreateInput, Prisma.ProductsUncheckedCreateInput>
}

/**
 * Products createMany
 */
export type ProductsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Products.
   */
  data: Prisma.ProductsCreateManyInput | Prisma.ProductsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Products createManyAndReturn
 */
export type ProductsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Products
   */
  select?: Prisma.ProductsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Products
   */
  omit?: Prisma.ProductsOmit<ExtArgs> | null
  /**
   * The data used to create many Products.
   */
  data: Prisma.ProductsCreateManyInput | Prisma.ProductsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Products update
 */
export type ProductsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Products
   */
  select?: Prisma.ProductsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Products
   */
  omit?: Prisma.ProductsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductsInclude<ExtArgs> | null
  /**
   * The data needed to update a Products.
   */
  data: Prisma.XOR<Prisma.ProductsUpdateInput, Prisma.ProductsUncheckedUpdateInput>
  /**
   * Choose, which Products to update.
   */
  where: Prisma.ProductsWhereUniqueInput
}

/**
 * Products updateMany
 */
export type ProductsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Products.
   */
  data: Prisma.XOR<Prisma.ProductsUpdateManyMutationInput, Prisma.ProductsUncheckedUpdateManyInput>
  /**
   * Filter which Products to update
   */
  where?: Prisma.ProductsWhereInput
  /**
   * Limit how many Products to update.
   */
  limit?: number
}

/**
 * Products updateManyAndReturn
 */
export type ProductsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Products
   */
  select?: Prisma.ProductsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Products
   */
  omit?: Prisma.ProductsOmit<ExtArgs> | null
  /**
   * The data used to update Products.
   */
  data: Prisma.XOR<Prisma.ProductsUpdateManyMutationInput, Prisma.ProductsUncheckedUpdateManyInput>
  /**
   * Filter which Products to update
   */
  where?: Prisma.ProductsWhereInput
  /**
   * Limit how many Products to update.
   */
  limit?: number
}

/**
 * Products upsert
 */
export type ProductsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Products
   */
  select?: Prisma.ProductsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Products
   */
  omit?: Prisma.ProductsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductsInclude<ExtArgs> | null
  /**
   * The filter to search for the Products to update in case it exists.
   */
  where: Prisma.ProductsWhereUniqueInput
  /**
   * In case the Products found by the `where` argument doesn't exist, create a new Products with this data.
   */
  create: Prisma.XOR<Prisma.ProductsCreateInput, Prisma.ProductsUncheckedCreateInput>
  /**
   * In case the Products was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductsUpdateInput, Prisma.ProductsUncheckedUpdateInput>
}

/**
 * Products delete
 */
export type ProductsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Products
   */
  select?: Prisma.ProductsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Products
   */
  omit?: Prisma.ProductsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductsInclude<ExtArgs> | null
  /**
   * Filter which Products to delete.
   */
  where: Prisma.ProductsWhereUniqueInput
}

/**
 * Products deleteMany
 */
export type ProductsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Products to delete
   */
  where?: Prisma.ProductsWhereInput
  /**
   * Limit how many Products to delete.
   */
  limit?: number
}

/**
 * Products.Rooms
 */
export type Products$RoomsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rooms
   */
  select?: Prisma.RoomsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rooms
   */
  omit?: Prisma.RoomsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RoomsInclude<ExtArgs> | null
  where?: Prisma.RoomsWhereInput
  orderBy?: Prisma.RoomsOrderByWithRelationInput | Prisma.RoomsOrderByWithRelationInput[]
  cursor?: Prisma.RoomsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RoomsScalarFieldEnum | Prisma.RoomsScalarFieldEnum[]
}

/**
 * Products without action
 */
export type ProductsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Products
   */
  select?: Prisma.ProductsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Products
   */
  omit?: Prisma.ProductsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductsInclude<ExtArgs> | null
}
